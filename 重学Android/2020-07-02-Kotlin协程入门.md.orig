---
layout:     post  
title:      Kotlin协程入门 
subtitle:   协程
date:       2020-07-02
author:     小卷子
header-img: img/tag-bg.jpg
catalog: true
tags:
    - 标签
---



[toc]





<<<<<<< HEAD


### 协程是什么

协程是`Kotlin`官方提供的一套管理线程的API，可以用看起来同步的代码写出异步的代码。

### 协程怎么写

添加依赖

```kotlin
//协程核心库
implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
//当前平台所对应的平台库
implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7'
```

```kotlin
GlobalScope.launch {
    print( "test,${Thread.currentThread().name}")
}
```



### 协程的亮点

协程的优势在于可以来回切换线程

```kotlin
//指定主线程运行
GlobalScope.launch (Dispatchers.Main){
    inIo1()
    inUi1()
    inIo2()
    inUi2()
    inIo3()
    inUi3()
}
```

`inIo1`函数执行在子线程，`inUi1`函数执行在主线程。

以上代码会按顺序执行，就像普通的函数。

```kotlin
suspend fun inIo1() {
    withContext(Dispatchers.IO) {
        println("io1 ${Thread.currentThread().name}")
    }
}


fun inUi1() {
    println("ui1 ${Thread.currentThread().name}")
}
```



协程会提供一个线程池作为线程的运行环境，在开启协程的时候可以执行这个协程在哪个线程开启。

~~~kotlin
GlobalScope.launch (Dispatchers.Main){
  //协程内的代码会在主线程运行
}
~~~

被`suspend`关键字修饰的函数被称为挂起函数。协程在执行挂起函数时，会把线程切到挂起函数对应的线程中，等待挂起函数执行完后再将线程切换到原先的环境继续执行。

以上代码中`inIo1`是一个挂起函数，内部执行切换到IO线程执行。当``inIo1``执行完后协程又自动回到原先的主线程执行`inUi1`的代码。``inUi1``是一个普通的函数，并没有指定运行的线程。所以会运行到协程指定的线程环境中。



### 挂起函数

被`suspend`关键字修饰的函数就是挂起函数。挂起函数只能运行在协程体或者另一个挂起函数中。但是`suspend`关键字并没有任何实际的功能。内部切换线程还是要依靠其他的挂起函数。

以上代码中`inIo1`是一个挂起函数，运行在 `GlobalScope.launch`的协程中，内部调用了`withContext`挂起函数来切换线程。



###  suspend的意义

`suspend`关键字并没有任何实际的功能，如果声明一个挂起函数内部却没有调用其他挂起函数，IDE会提示关键字是多余的。这个关键字的意义在于对使用者的提醒。让调用者知道这个函数是一个挂起函数。可能是一个耗时的函数，所以请在协程中调用。挂起的操作是有内部的其他的挂起函数实现的并不是这关键字。



###  Retrofit对协程的支持





### 协程和线程、Handler的对比





### 协程结合jetpack的使用





### 协程的工作原理





### 协程的delay()和Thread.sleep()




=======
### 协程是什么





### 协程的写法





### 协程的优势



### suspend关键字的作用



### Retrofit 对协程的支持



### 协程，线程，Handler的对比



### 协程结合jetpack的结合



### 协程的工作原理



### 协程的delay()和Thread.sleep()


>>>>>>> 8d06c1e9cd17746ba43a06f567cd72acb157fd6a

